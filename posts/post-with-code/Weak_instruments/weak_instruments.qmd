---
date: "2023-09-01"
title: "Weak Instruments and Hierarchical Bayes"
categories: ["weak instruemnts", "iv regression"]
self-contained: true
execute: 
  enabled: true
jupyter: examined_algorithms_website
draft: true
---


```{python}

import pandas as pd
import numpy as np
import pymc as pm
import statsmodels.formula.api as smf
from stargazer.stargazer import Stargazer
import pytensor.tensor as pt


```


```{python}
iv_df = pd.read_csv('AK1991.csv')
iv_df.head()
```

## Simple OLS

```{python}

mod_1 = smf.ols('logwage ~ 1 + edu + black', iv_df).fit()
mod_2 = smf.ols('logwage ~ 1 + edu + black + C(yob)', iv_df).fit()
mod_3 = smf.ols('logwage ~ 1 + edu + black + C(state) + C(yob)', iv_df).fit()
Stargazer([mod_1, mod_2, mod_3])


```


## 2SLS

```{python}
df_sample = iv_df.sample(1000, random_state=100).copy()

def make_2sls(formula, instrument_formula, iv_df):
    first_stage = smf.ols(instrument_formula, iv_df).fit()
    iv_df['edu_predicted'] = first_stage.predict(iv_df)
    second_stage = smf.ols(formula, iv_df).fit()
    return second_stage, first_stage

mod_4, mod_4_1 = make_2sls('logwage ~ 1 + edu_predicted', 'edu ~ C(qob)', df_sample)
mod_5, mod_5_1 = make_2sls('logwage ~ 1 + edu_predicted + black', 'edu ~ C(qob)', df_sample)
mod_6, mod_6_1 = make_2sls('logwage ~ 1 + edu_predicted + black + C(state)', 'edu ~ C(qob)', df_sample)
mod_7, mod_7_1 = make_2sls('logwage ~ 1 + edu_predicted + black + C(state) + C(yob)', 'edu ~ C(qob)', df_sample)

Stargazer([mod_4, mod_5])    



```




```{python}

instrument_model = smf.ols('edu ~ 0 + C(qob)', df_sample)
instrument_preds = instrument_model.data.exog
instrument_preds = instrument_preds - instrument_preds.mean()
instrument_y = instrument_model.data.endog


outcome_model = smf.ols('logwage ~ 0 + edu + black', df_sample)
outcome_preds = outcome_model.data.exog
outcome_y = outcome_model.data.endog 


coords = {'instruments': ['qob_1', 'qob_2', 'qob_3', 'qob_4'], 
         'covariates': ['edu', 'black']}

with pm.Model(coords=coords) as model:
    sigma_y = pm.HalfNormal("sigma_y", 1)
    sigma_t = pm.HalfNormal("sigma_t", 1)
    intercept_y = pm.Normal(name="intercept_y_raw", mu=1, sigma=1)
    intercept_y = pm.Deterministic('intercept_y', intercept_y*sigma_y)
    intercept_t = pm.Normal(name="intercept_t_raw", mu=1, sigma=1)
    intercept_t = pm.Deterministic('intercept_t', intercept_t*sigma_t)
    beta_t = pm.Normal(
                name="beta_t",
                mu=0,
                sigma=1,
                dims="instruments",
            )
    beta_x = pm.Normal(
        name="beta_x",
        mu=0,
        sigma=1,
        dims="covariates",
    )
    sd_dist = pm.HalfNormal.dist(1, shape=2)
    chol, corr, sigmas = pm.LKJCholeskyCov(
        name="chol_cov",
        eta=2,
        n=2,
        sd_dist=sd_dist,
    
    )
    # compute and store the covariance matrix
    #cov = pm.Deterministic(name="cov", var=pt.dot(l=chol, r=chol.T))

    # --- Parameterization ---
    mu_y = pm.Deterministic(name="mu_y", var=pm.math.dot(outcome_preds, beta_x) + intercept_y)
    # focal regression
    sigma_ = pm.HalfNormal("sigma", 1)
    mu_t = pm.Deterministic(name="mu_t", var=pm.math.dot(instrument_preds, beta_t) + intercept_t)

    # instrumental regression
    mu = pm.Deterministic(name="mu", var=pt.stack(tensors=(mu_y, mu_t), axis=1))

    # --- Likelihood ---
    pm.MvNormal(
        name="likelihood",
        mu=mu,
        chol=chol,
        observed=np.stack(arrays=(outcome_y, instrument_y), axis=1),
        shape=(outcome_preds.shape[0], 2),
    )



pm.model_to_graphviz(model)

```



```{python}
with model:
    idata = pm.sample_prior_predictive()
    idata.extend(pm.sample(draws=500, chains=2, target_accept=0.95, nuts_sampler='numpyro'))
    #approx = pm.fit()
    #idata = approx.sample(1000)


```


```{python}
import arviz as az
az.summary(idata, var_names=['intercept_y', 'intercept_t', 'beta_t', 'beta_x','beta_t_shifted'])

```


```{python}

idata.posterior["chol_cov_corr"].mean(dim=("chain", "draw"))


```


```{python}

az.plot_pair(idata, var_names=['intercept_y', 'intercept_t', 'beta_x', 'beta_t_shifted'], divergences=True)


```