import pymc as pm
import pymc as pm
import pymc as pm
with pm.Model() as model:
beta = pm.Normal('beta', 0, 1)
pm.model_to_graphviz(model)
import pymc as pm
with pm.Model() as model:
beta = pm.Normal('beta', 0, 1)
pm.model_to_graphviz(model)
model
import pymc as pm
df_py = r$df
with pm.Model() as model:
beta = pm.Normal('beta', 0, 1)
pm.model_to_graphviz(model)
model
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('sem_data.csv')
with pm.Model() as model:
beta = pm.Normal('beta', 0, 1)
pm.model_to_graphviz(model)
model
View(df_p)
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', '\t')
with pm.Model() as model:
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
model
View(df_p)
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\t')
with pm.Model() as model:
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
model
View(df_p)
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\t\r')
with pm.Model() as model:
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
model
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\t+')
with pm.Model() as model:
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
model
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\s+')
with pm.Model() as model:
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
model
View(df_p)
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\s+')
coords = {'obs': list(range(len(df_p))), 'indicators'; list(range(5))
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma(5, 10, dim='indicators')
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
model
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\s+')
coords = {'obs': list(range(len(df_p))), 'indicators': list(range(5))
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma(5, 10, dim='indicators')
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
model
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\s+')
coords = {'obs': list(range(len(df_p))), 'indicators': list(range(5))
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dim='indicators')
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
model
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\s+')
coords = {'obs': list(range(len(df_p))), 'indicators': list(range(5))
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
model
View(model)
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\s+')
coords = {'obs': list(range(len(df_p))), 'indicators': list(range(5))
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
import pymc as pm
import pandas as pd
import numpy as np
df_p = pd.read_csv('IIS.dat', sep='\s+')
coords = {'obs': list(range(len(df_p))), 'indicators': list(range(5))
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
sup_p = pm.Normal('sup_1', 0, 1)
plt.plot()
pm.model_to_graphviz(model)
import pymc as pm
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df_p = pd.read_csv('IIS.dat', sep='\s+')
coords = {'obs': list(range(len(df_p))), 'indicators': list(range(5))
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
sup_p = pm.Normal('sup_1', 0, 1)
plt.plot()
pm.model_to_graphviz(model)
import pymc as pm
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df_p = pd.read_csv('IIS.dat', sep='\s+')
coords = {'obs': list(range(len(df_p))), 'indicators': list(range(5))
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
sup_p = pm.Normal('sup_1', 0, 1)
pm.model_to_graphviz(model)
plt.plot()
import pymc as pm
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
df_p = pd.read_csv('IIS.dat', sep='\s+')
coords = {'obs': list(range(len(df_p))), 'indicators': list(range(5))
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
sup_p = pm.Normal('sup_1', 0, 1)
print(pm.model_to_graphviz(model))
plt.plot()
import pymc as pm
import pymc as pm
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pytensor import tensor as pt
import arviz as az
df_p = pd.read_csv('IIS.dat', sep='\s+')
df_p.head()
coords = {'obs': list(range(len(df_p))),
'indicators': ['PI', 'AD',	'IGC', 'FI', 'FC'],
'indicators_1': ['PI', 'AD',	'IGC'],
'indicators_2': ['FI', 'FC'],
'latent': ['Student', 'Faculty']
}
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
lambdas_ = pm.Normal('lambdas_1', 1, 10, dims=('indicators_1'))
lambdas_1 = pm.Deterministic('lambdas1', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_1'))
lambdas_ = pm.Normal('lambdas_2', 1, 10, dims=('indicators_2'))
lambdas_2 = pm.Deterministic('lambdas2', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_2'))
tau = pm.Normal('tau', 3, 10, dims='indicators')
kappa = 0
sd_dist = pm.Exponential.dist(1.0, shape=2)
chol, _, _ = pm.LKJCholeskyCov('chol_cov', n=2, eta=2,
sd_dist=sd_dist, compute_corr=True)
ksi = pm.MvNormal('ksi', kappa, chol=chol, dims=('obs', 'latent'))
m1 = tau[0] + ksi[obs_idx, 0]*lambdas_1[0]
m2 = tau[1] + ksi[obs_idx, 0]*lambdas_1[1]
m3 = tau[2] + ksi[obs_idx, 0]*lambdas_1[2]
m4 = tau[3] + ksi[obs_idx, 1]*lambdas_2[0]
m5 = tau[4] + ksi[obs_idx, 1]*lambdas_2[1]
mu = pm.Deterministic('mu', pm.math.stack([m1, m2, m3, m4, m5]).T)
_  = pm.Normal('likelihood', mu, Psi, observed=df_p.values)
idata = pm.sample(nuts_sampler='numpyro', target_accept=.95)
pm.model_to_graphviz(model)
coords = {'obs': list(range(len(df_p))),
'indicators': ['PI', 'AD',	'IGC', 'FI', 'FC'],
'indicators_1': ['PI', 'AD',	'IGC'],
'indicators_2': ['FI', 'FC'],
'latent': ['Student', 'Faculty']
}
obs_idx = list(range(len(df_p)))
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
lambdas_ = pm.Normal('lambdas_1', 1, 10, dims=('indicators_1'))
lambdas_1 = pm.Deterministic('lambdas1', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_1'))
lambdas_ = pm.Normal('lambdas_2', 1, 10, dims=('indicators_2'))
lambdas_2 = pm.Deterministic('lambdas2', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_2'))
tau = pm.Normal('tau', 3, 10, dims='indicators')
kappa = 0
sd_dist = pm.Exponential.dist(1.0, shape=2)
chol, _, _ = pm.LKJCholeskyCov('chol_cov', n=2, eta=2,
sd_dist=sd_dist, compute_corr=True)
ksi = pm.MvNormal('ksi', kappa, chol=chol, dims=('obs', 'latent'))
m1 = tau[0] + ksi[obs_idx, 0]*lambdas_1[0]
m2 = tau[1] + ksi[obs_idx, 0]*lambdas_1[1]
m3 = tau[2] + ksi[obs_idx, 0]*lambdas_1[2]
m4 = tau[3] + ksi[obs_idx, 1]*lambdas_2[0]
m5 = tau[4] + ksi[obs_idx, 1]*lambdas_2[1]
mu = pm.Deterministic('mu', pm.math.stack([m1, m2, m3, m4, m5]).T)
_  = pm.Normal('likelihood', mu, Psi, observed=df_p.values)
idata = pm.sample(nuts_sampler='numpyro', target_accept=.95)
pm.model_to_graphviz(model)
reticulate::py_last_error()
import pymc as pm
import pymc as pm
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pytensor import tensor as pt
import arviz as az
df_p = pd.read_csv('IIS.dat', sep='\s+')
df_p.head()
coords = {'obs': list(range(len(df_p))),
'indicators': ['PI', 'AD',	'IGC', 'FI', 'FC'],
'indicators_1': ['PI', 'AD',	'IGC'],
'indicators_2': ['FI', 'FC'],
'latent': ['Student', 'Faculty']
}
obs_idx = list(range(len(df_p)))
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
lambdas_ = pm.Normal('lambdas_1', 1, 10, dims=('indicators_1'))
lambdas_1 = pm.Deterministic('lambdas1', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_1'))
lambdas_ = pm.Normal('lambdas_2', 1, 10, dims=('indicators_2'))
lambdas_2 = pm.Deterministic('lambdas2', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_2'))
tau = pm.Normal('tau', 3, 10, dims='indicators')
kappa = 0
sd_dist = pm.Exponential.dist(1.0, shape=2)
chol, _, _ = pm.LKJCholeskyCov('chol_cov', n=2, eta=2,
sd_dist=sd_dist, compute_corr=True)
ksi = pm.MvNormal('ksi', kappa, chol=chol, dims=('obs', 'latent'))
m1 = tau[0] + ksi[obs_idx, 0]*lambdas_1[0]
m2 = tau[1] + ksi[obs_idx, 0]*lambdas_1[1]
m3 = tau[2] + ksi[obs_idx, 0]*lambdas_1[2]
m4 = tau[3] + ksi[obs_idx, 1]*lambdas_2[0]
m5 = tau[4] + ksi[obs_idx, 1]*lambdas_2[1]
mu = pm.Deterministic('mu', pm.math.stack([m1, m2, m3, m4, m5]).T)
_  = pm.Normal('likelihood', mu, Psi, observed=df_p.values)
idata = pm.sample(nuts_sampler='numpyro', target_accept=.95)
pm.model_to_graphviz(model)
coords = {'obs': list(range(len(df_p))),
'indicators': ['PI', 'AD',	'IGC', 'FI', 'FC'],
'indicators_1': ['PI', 'AD',	'IGC'],
'indicators_2': ['FI', 'FC'],
'latent': ['Student', 'Faculty']
}
obs_idx = list(range(len(df_p)))
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
lambdas_ = pm.Normal('lambdas_1', 1, 10, dims=('indicators_1'))
lambdas_1 = pm.Deterministic('lambdas1', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_1'))
lambdas_ = pm.Normal('lambdas_2', 1, 10, dims=('indicators_2'))
lambdas_2 = pm.Deterministic('lambdas2', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_2'))
tau = pm.Normal('tau', 3, 10, dims='indicators')
kappa = 0
sd_dist = pm.Exponential.dist(1.0, shape=2)
chol, _, _ = pm.LKJCholeskyCov('chol_cov', n=2, eta=2,
sd_dist=sd_dist, compute_corr=True)
ksi = pm.MvNormal('ksi', kappa, chol=chol, dims=('obs', 'latent'))
m1 = tau[0] + ksi[obs_idx, 0]*lambdas_1[0]
m2 = tau[1] + ksi[obs_idx, 0]*lambdas_1[1]
m3 = tau[2] + ksi[obs_idx, 0]*lambdas_1[2]
m4 = tau[3] + ksi[obs_idx, 1]*lambdas_2[0]
m5 = tau[4] + ksi[obs_idx, 1]*lambdas_2[1]
mu = pm.Deterministic('mu', pm.math.stack([m1, m2, m3, m4, m5]).T)
_  = pm.Normal('likelihood', mu, Psi, observed=df_p.values)
idata = pm.sample(nuts_sampler='numpyro', target_accept=.95)
pm.model_to_networkx(model)
coords = {'obs': list(range(len(df_p))),
'indicators': ['PI', 'AD',	'IGC', 'FI', 'FC'],
'indicators_1': ['PI', 'AD',	'IGC'],
'indicators_2': ['FI', 'FC'],
'latent': ['Student', 'Faculty']
}
obs_idx = list(range(len(df_p)))
with pm.Model(coords=coords) as model:
Psi = pm.InverseGamma('Psi', 5, 10, dims='indicators')
lambdas_ = pm.Normal('lambdas_1', 1, 10, dims=('indicators_1'))
lambdas_1 = pm.Deterministic('lambdas1', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_1'))
lambdas_ = pm.Normal('lambdas_2', 1, 10, dims=('indicators_2'))
lambdas_2 = pm.Deterministic('lambdas2', pt.set_subtensor(lambdas_[0], 1), dims=('indicators_2'))
tau = pm.Normal('tau', 3, 10, dims='indicators')
kappa = 0
sd_dist = pm.Exponential.dist(1.0, shape=2)
chol, _, _ = pm.LKJCholeskyCov('chol_cov', n=2, eta=2,
sd_dist=sd_dist, compute_corr=True)
ksi = pm.MvNormal('ksi', kappa, chol=chol, dims=('obs', 'latent'))
m1 = tau[0] + ksi[obs_idx, 0]*lambdas_1[0]
m2 = tau[1] + ksi[obs_idx, 0]*lambdas_1[1]
m3 = tau[2] + ksi[obs_idx, 0]*lambdas_1[2]
m4 = tau[3] + ksi[obs_idx, 1]*lambdas_2[0]
m5 = tau[4] + ksi[obs_idx, 1]*lambdas_2[1]
mu = pm.Deterministic('mu', pm.math.stack([m1, m2, m3, m4, m5]).T)
_  = pm.Normal('likelihood', mu, Psi, observed=df_p.values)
idata = pm.sample(nuts_sampler='numpyro', target_accept=.95)
g = pm.model_to_networkx(model)
g
View(g)
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pytensor import tensor as pt
import arviz as az
import networkx as nx
df_p = pd.read_csv('IIS.dat', sep='\s+')
df_p.head()
nx.draw(g)
idata
nx.draw_networkx(g)
View(g)
g = pm.model_to_graphviz(model)
g.view()
g = pm.model_to_graphviz(model)
g.render()
g = pm.model_to_graphviz(model)
g.render('pymc_model.png'))
g = pm.model_to_graphviz(model)
g.render('pymc_model.png')
az.summary(idata, var_names=['lambdas1', 'lambdas2', 'tau', 'Psi', 'ksi', 'chol_cov_corr'],
coords= {'obs': [0, 7]})
reticulate::repl_python()
#| warning: false
#|
library(lavaan)
library(dplyr)
library(reticulate)
library(marginaleffects)
library(modelsummary)
library(ggplot2)
library(egg)
library(lme4)
library(semPlot)
library(tinytable)
library(kableExtra)
library(reshape2)
reticulate::py_run_string("import pymc as pm")
options(rstudio.python.installationPath = "/Users/nathanielforde/mambaforge/envs")
options("modelsummary_factory_default" = "tinytable")
options(repr.plot.width=15, repr.plot.height=8)
knitr::knit_engines$set(python = reticulate::eng_python)
options(scipen=999)
set.seed(130)
reticulate::repl_python()
py$summary_df |> kable()
reticulate::repl_python()
