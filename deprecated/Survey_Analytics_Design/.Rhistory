import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
pd.options.display.float_format = '{:.2f}'.format
agstrat_py = pd.read_csv('agstrat_py.csv')
def weighted_average(y,weights,axis=0):
num = np.nansum(y*weights,axis=axis)
denom =((~np.isnan(y))*weights).sum(axis=axis)
return num / denom
def weighted_total(y, weights):
return np.sum(y*weights)
def weighted_var(y, weights):
n = len(y)
yhat = weighted_average(y, weights)
variance = weighted_average(((y-yhat)**2)*n/(n-1), weights)
return variance
def random_sample(arr, size=1):
return arr[np.random.choice(len(arr), size=len(arr), replace=True)]
def bootstrap_uncertainty(y, weights, f, reps=1000):
ys = [random_sample(y) for i in range(reps)]
s = [f(ys[i], weights) for i in range(reps)]
return pd.DataFrame({'stat': s})
bs_mean = bootstrap_uncertainty(agstrat_py['acres92'], agstrat_py['strwt'], weighted_average)
fig, ax = plt.subplots(figsize=(10, 8))
ax.hist(bs_mean, bins=30, color='slateblue', ec='black')
ax.axvline(bs_mean['stat'].mean(), color='red', label='Expectation')
ax.axvline(bs_mean['stat'].quantile(0.025), color='grey',
label='Lower Bound', linestyle='--')
ax.axvline(bs_mean['stat'].quantile(0.975), color='grey', label='Upper Bound', linestyle='--')
ax.set_title("Bootstrapped Samples of Weighted Sample Mean")
ax.legend()
plt.show();
def make_summary(y, weights, f):
s = f(y, weights)
ss = bootstrap_uncertainty(y, weights, f)
s_lb = ss['stat'].quantile(0.025)
s_ub = ss['stat'].quantile(0.975)
return [s, s_lb, s_ub]
summaries = pd.DataFrame(
[make_summary(agstrat_py['acres92'], agstrat_py['strwt'], weighted_average),
make_summary(agstrat_py['acres92'], agstrat_py['strwt'], weighted_total),
make_summary(agstrat_py['acres92'], agstrat_py['strwt'], weighted_var)],
columns =['Statistic', 'Lower Bound', 'Upper Bound'],
index=['mean', 'var', 'total']
)
summaries
strata_mean = pd.DataFrame(agstrat_py.groupby('region').apply(lambda x: make_summary(np.array(x['acres92']), np.array(x['strwt']), weighted_average), include_groups=False, ).to_dict(), index=['Statistic', 'Lower Bound', 'Upper Bound']).T
strata_mean
strata_total = (pd.DataFrame(agstrat_py.groupby('region').apply(lambda x: make_summary(np.array(x['acres92']),
np.array(x['strwt']), weighted_total), include_groups=False,).to_dict(), index=['Statistic', 'Lower Bound', 'Upper Bound']).T
)
strata_total
strata_var = pd.DataFrame(agstrat_py.groupby('region').apply(lambda x: make_summary(np.array(x['acres92']), np.array(x['strwt']), weighted_var), include_groups=False, ).to_dict(), index=['Statistic', 'Lower Bound', 'Upper Bound']).T
strata_var
np.sqrt(strata_var)
strata_var = pd.DataFrame(agstrat_py.groupby('region').apply(lambda x: make_summary(np.array(x['acres92']), np.array(x['strwt']), weighted_var), include_groups=False, ).to_dict(), index=['Statistic', 'Lower Bound', 'Upper Bound']).T
strata_var
make_summary(agstrat_py['lt200k'], agstrat_py['strwt'], weighted_average)
agsrs_py = r.agsrs
def weighted_ratio(num, denom, weights):
n = weighted_average(num,weights)
d = weighted_average(denom,weights)
return n / d
weighted_ratio(agsrs_py['acres92'], agsrs_py['acres87'], agsrs_py['sampwt'])
