---
title: "Complex Survey Analysis"
categories: ["probability", "generalised additive models", "gaussian processes"]
keep-ipynb: true
self-contained: true
draft: true
execute: 
  eval: false
jupyter: pymc_causal
engine: knitr
author:
    - url: https://nathanielf.github.io/
    - affiliation: PyMC dev
citation: true
---


```{r}
# input Stata file
library(foreign)
library(survey)
library(reticulate)
options(rstudio.python.installationPath = "/Users/nathanielforde/mambaforge/envs")

knitr::knit_engines$set(python = reticulate::eng_python)
```


```{r}
library(SDAResources)
data(agstrat)
popsize_recode <- c('NC' = 1054, 'NE' = 220, 'S' = 1382, 'W' = 422)
agstrat$popsize <- popsize_recode[agstrat$region]
agstrat$lt200k <- rep(0,nrow(agstrat))
agstrat$lt200k[agstrat$acres92 < 200000] <- 1
write.csv(agstrat,'agstrat_py.csv')

head(agstrat)
```

```{r}

### Draw a boxplot of the stratified random sample
boxplot(acres92/10^6 ~ region, xlab = "Region", ylab = "Millions of Acres",
        data = agstrat)
```

```{r}

## Specify Simple Random Sample Design
dstr <- svydesign(id = ~1, strata = ~region, weights = ~strwt, 
                  data = agstrat) 
summary(dstr) 

```

### Survey Summary Statistics


```{r}
smean<-svymean(~acres92, dstr)
stotal<-svytotal(~acres92, dstr)
svar = svyvar(~acres92, design = dstr, na.rm=T)
sstd = sqrt(svar)

d <- data.frame(c(smean, confint(smean)),
           c(stotal, confint(stotal)), 
           c(svar, confint(svar)), 
           c(sstd, sqrt(confint(svar)))
           )
colnames(d) <- c('Mean', 'Total', 'Variance', 'Standard Deviation')
d

```

```{r}

s_mean = svyby(~acres92, by=~region, dstr, svymean, keep.var = TRUE, vartype = 'ci')
s_mean

```

```{r}
svyby(~acres92, by=~region, dstr, svyvar, keep.var = TRUE, vartype = 'ci')

```
## Replicate Means and Standard Deviations in Python

```{python}

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
pd.options.display.float_format = '{:.2f}'.format
agstrat_py = pd.read_csv('agstrat_py.csv')


def weighted_average(y,weights,axis=0):
    num = np.nansum(y*weights,axis=axis)
    denom =((~np.isnan(y))*weights).sum(axis=axis)
    return num / denom

def weighted_total(y, weights):
  return np.sum(y*weights)

def weighted_var(y, weights):
  n = len(y)
  yhat = weighted_average(y, weights)
  variance = weighted_average(((y-yhat)**2)*n/(n-1), weights)
  return variance

def random_sample(arr, size=1):
    return arr[np.random.choice(len(arr), size=len(arr), replace=True)]

def bootstrap_uncertainty(y, weights, f, reps=1000):
  ys = [random_sample(y) for i in range(reps)]
  s = [f(ys[i], weights) for i in range(reps)]
  return pd.DataFrame({'stat': s})

```


```{python}
bs_mean = bootstrap_uncertainty(agstrat_py['acres92'], agstrat_py['strwt'], weighted_average)

fig, ax = plt.subplots(figsize=(10, 8))
ax.hist(bs_mean, bins=30, color='slateblue', ec='black')
ax.axvline(bs_mean['stat'].mean(), color='red', label='Expectation')
ax.axvline(bs_mean['stat'].quantile(0.025), color='grey', 
label='Lower Bound', linestyle='--')
ax.axvline(bs_mean['stat'].quantile(0.975), color='grey', label='Upper Bound', linestyle='--')
ax.set_title("Bootstrapped Samples of Weighted Sample Mean")
ax.legend()
plt.show();
  
```


```{python}

def make_summary(y, weights, f):
  s = f(y, weights)
  ss = bootstrap_uncertainty(y, weights, f)
  s_lb = ss['stat'].quantile(0.025)
  s_ub = ss['stat'].quantile(0.975)
  return [s, s_lb, s_ub]

summaries = pd.DataFrame(
  
[make_summary(agstrat_py['acres92'], agstrat_py['strwt'], weighted_average), 
make_summary(agstrat_py['acres92'], agstrat_py['strwt'], weighted_total),
make_summary(agstrat_py['acres92'], agstrat_py['strwt'], weighted_var)], 

columns =['Statistic', 'Lower Bound', 'Upper Bound'], 
index=['mean', 'var', 'total']
)

summaries

```

```{python}
strata_mean = pd.DataFrame(agstrat_py.groupby('region').apply(lambda x: make_summary(np.array(x['acres92']), np.array(x['strwt']), weighted_average), include_groups=False, ).to_dict(), index=['Statistic', 'Lower Bound', 'Upper Bound']).T

strata_mean

```

```{python}

strata_total = (pd.DataFrame(agstrat_py.groupby('region').apply(lambda x: make_summary(np.array(x['acres92']), 
np.array(x['strwt']), weighted_total), include_groups=False,).to_dict(), index=['Statistic', 'Lower Bound', 'Upper Bound']).T
)

strata_total

```

```{python}

strata_var = pd.DataFrame(agstrat_py.groupby('region').apply(lambda x: make_summary(np.array(x['acres92']), np.array(x['strwt']), weighted_var), include_groups=False, ).to_dict(), index=['Statistic', 'Lower Bound', 'Upper Bound']).T

strata_var
```

```{python}

np.sqrt(strata_var)


```
### Weighted Proportions

```{r}

dstr <- svydesign(id = ~1, strata = ~region, fpc = ~popsize,
                  weights = ~strwt, data = agstrat) 

svyciprop(~I(lt200k==1), dstr, method="beta")

```

```{python}

make_summary(agstrat_py['lt200k'], agstrat_py['strwt'], weighted_average)

```


## Estimating a Ratio

```{r}

data(agsrs)
n<-nrow(agsrs) #300
agsrs$sampwt <- rep(3078/n,n)
agdsrs <- svydesign(id = ~1, weights=~sampwt, fpc=rep(3078,300), data = agsrs)
#agdsrs
# correlatIon of acres87 and acres92
#cor(agsrs$acres87,agsrs$acres92) 
# estimate the ratio acres92/acres87
sratio<-svyratio(numerator = ~acres92, denominator = ~acres87,design = agdsrs)
sratio

````


```{python}

agsrs_py = r.agsrs

def weighted_ratio(num, denom, weights):
  n = weighted_average(num,weights)
  d = weighted_average(denom,weights)
  return n / d

weighted_ratio(agsrs_py['acres92'], agsrs_py['acres87'], agsrs_py['sampwt'])


```


