# Load the crackers data set
cracker = data("Cracker", package = "mlogit")
cracker <- as.data.table(Cracker)
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
# Load the crackers data set
cracker = data("Cracker", package = "mlogit")
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id]
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dummy
cracker_long$lastchoice <- as.integer(cracker_long$last == cracker_long$alt)
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
describe(n_choice_id[, .(N)], fast = TRUE)
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
describe(n_choice_id[, .(N)], fast = TRUE)
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dummy
cracker_long$lastchoice <- as.integer(cracker_long$last == cracker_long$alt)
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dumm
# divide price by 100 => $ / oz
cracker_long$price <- cracker_long$price / 100
# make sure "private" is reference alternative in analyses
attr(cracker_long, "index")[["alt"]] <- relevel(attr(cracker_long, "index")[["alt"]],
"private")
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dumm
# divide price by 100 => $ / oz
cracker_long$price <- cracker_long$price / 100
# make sure "private" is reference alternative in analyses
# prep/reshape data for Bayesian estimation
M <- model.matrix(mFormula(choice ~ price + feat + disp),
data = cracker_long)
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dumm
# divide price by 100 => $ / oz
cracker_long$price <- cracker_long$price / 100
# make sure "private" is reference alternative in analyses
# prep/reshape data for Bayesian estimation
M <- model.matrix(mFormula(choice ~ price + feat + disp,
data = cracker_long)
M |> summary()
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dumm
# divide price by 100 => $ / oz
cracker_long$price <- cracker_long$price / 100
# make sure "private" is reference alternative in analyses
# prep/reshape data for Bayesian estimation
M <- model.matrix(mFormula(choice ~ price + feat + disp, data = cracker_long)
M
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dumm
# divide price by 100 => $ / oz
cracker_long$price <- cracker_long$price / 100
# make sure "private" is reference alternative in analyses
# prep/reshape data for Bayesian estimation
nl <- mlogit(choice ~ price + feat + disp, data = cracker_long,
#nests = list(national_brands = c("keebler", "nabisco", "sunshine"),
#store_brand = c("private")), un.nest.el = TRUE
)
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dumm
# divide price by 100 => $ / oz
cracker_long$price <- cracker_long$price / 100
# make sure "private" is reference alternative in analyses
# prep/reshape data for Bayesian estimation
nl <- mlogit(choice ~ price + feat + disp, data = cracker_long
#nests = list(national_brands = c("keebler", "nabisco", "sunshine"),
#store_brand = c("private")), un.nest.el = TRUE
)
View(cracker_long)
View(cracker_long)
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dumm
# divide price by 100 => $ / oz
cracker_long$price <- cracker_long$price / 100
# make sure "private" is reference alternative in analyses
# prep/reshape data for Bayesian estimation
nl <- mlogit(choice ~ price + feat + disp, data = cracker_long)
# Load the mlogit package
library(mlogit)
library(dplyr)
library(data.table)
data(Cracker) # Cracker data of Jain et al. (1994); included in the mlogit package
cracker <- as.data.table(Cracker)
cracker[, cs := 1:.N, by = id] # add choice situation for each consumer
3/7
# Descriptives stats =====================================================================
# number of consumers
# (we exclude the first choice for each consumer later to initialize the 'lastchoice' variable)
cracker[cs != 1, uniqueN(id)]
# number of choices for each consumer
n_choice_id <- cracker[cs != 1, .N, by = id]
# number of choices
(n <- n_choice_id[, sum(N)])
# choices
cracker[cs != 1, table(choice)]
# choice shares
cracker[cs != 1, round(table(choice) / .N, 3)]
# Data prep ==============================================================================
# build last choice variable and delete first choice (=> initialisation)
last_choice <- cracker[, .(id, cs = cs + 1L, lastchoice = choice)]
cracker <- merge(cracker, last_choice, by = c("id", "cs"))
# reshape data to long format
cracker_long <- mlogit.data(cracker, id = "id", choice = "choice", varying = c(3:14),
shape = "wide", sep = ".")
# transform lastchoice variable into dumm
# divide price by 100 => $ / oz
cracker_long$price <- cracker_long$price / 100
# make sure "private" is reference alternative in analyses
# prep/reshape data for Bayesian estimation
nl <- mlogit(choice ~ price + feat + disp, data = cracker_long, reflevel = 'private')
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'air',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = FALSE
)
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'air',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = TRUE
)
nmnl |> summary()
?mlogit
View(mnl)
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'air',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = TRUE
)
nmnl |> summary()
nmnl$coefficients
nmnl$model
nmnl$logLik
nmnl$est.stat
nmnl$indpar
nmnl$nests
nmnl$rpar
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'air',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = TRUE
)
summary(nmnl)
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long,
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = TRUE
)
summary(nmnl)
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'bus'
nests=list(land = c('car', 'bus', 'train'),
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'bus',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = TRUE
)
summary(nmnl)
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'train',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = TRUE
)
summary(nmnl)
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'car',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = TRUE
)
summary(nmnl)
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'air',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = TRUE
)
summary(nmnl)
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'air',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = FALSE
)
nmnl = mlogit(choice ~ vcost + travel + wait,
data=df_long, reflevel = 'air',
nests=list(land = c('car', 'bus', 'train'),
air = c('air')
),
un.nest.el = TRUE
)
summary(nmnl)
data("Heating", package = "mlogit")
H <- dfidx(Heating, choice = "depvar", varying = c(3:12))
m <- mlogit(depvar ~ ic + oc | 0, H)
summary(m)
data("Heating", package = "mlogit")
H <- dfidx(Heating, choice = "depvar", varying = c(3:12))
m <- mlogit(depvar ~ ic + oc | 1, H)
summary(m)
data("Heating", package = "mlogit")
H <- dfidx(Heating, choice = "depvar", varying = c(3:12))
m <- mlogit(depvar ~ ic + oc | 1, H,
nests=list(room = c("er", "gr"),
central = c("ec", "gc", "hp ")))
data("Heating", package = "mlogit")
H <- dfidx(Heating, choice = "depvar", varying = c(3:12))
m <- mlogit(depvar ~ ic + oc | 1, H,
nests=list(room = c("er", "gr"),
central = c("ec", "gc", "hp")))
summary(m)
options(scipen=999)
data("Heating", package = "mlogit")
H <- dfidx(Heating, choice = "depvar", varying = c(3:12))
m <- mlogit(depvar ~ ic + oc | 1, H,
nests=list(room = c("er", "gr"),
central = c("ec", "gc", "hp")))
summary(m)
View(last_choice)
??TravelMode
??TravelMode
mnl = mlogit(choice ~ vcost + wait + travel | 1, data=df_long)
mnl |> summary()
